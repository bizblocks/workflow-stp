stageBrowse.caption=Stages
stageEdit.caption=Stage editor
stageEdit.general=General
stageEdit.userTypeAction=Actors type
stageEdit.viewerTypeAction=Viewers type
stageEdit.selectUsers=Users
stageEdit.selectRole=Role
stageEdit.sameStepAlreadyExist=Same step with this name already exist
stageEdit.usersEmpty=Please select the actors
stageEdit.roleEmpty=Please select the actors role
stageEdit.browseScreenGroovyScript=Browse Screen Groovy Script
stageEdit.editScreenGroovyScript=Editor Screen Groovy Script
stageEdit.browseScreenGroovyScriptHelp=Here you can specify browse screen extending logic\
  <br>On script input available the next variables:\
  <ul>\
    <li><code>stage</code> - current browsing stage</li>\
    <li><code>screen</code> - link to screen</li>\
    <li><code>viewOnly</code> - screen opened to view only</li>\
  </ul>
stageEdit.editorScreenGroovyScriptHelp=Here you can specify editor screen extending logic\
  <br>On script input available the next variables:\
  <ul>\
    <li><code>entity</code> - editing entity.</li> \
    <li><code>context['value']</code> - execution context. In here you can save and get any variables during workflow execution process.</li>\
    <li><code>screen</code> - link to screen</li>\
    <li><code>workflowInstance</code> - current workflow instance object</li>\
    <li><code>workflowInstanceTask</code> - active workflow task of workflow instance</li>\
  </ul>\
  <br>If you need to ask user to enter the comment you can call next dialog:\
  <br><code>WorkflowInstanceCommentDialog#askComment(Frame screen, WorkflowInstanceTask task, Boolean required)</code> where screen current window, task is which task we want to leave comment, and required is a flag of requirement of comment.\
  <br>\
  <br>To finish workflow task at the end of your logic you need to call service\
  <code>WorkflowService#finishTask(WorkflowInstance task)</code> which finish current task and iterate workflow instance to the next step.
stageEdit.executionGroovyScript=Execution Groovy Script
stageEdit.executionGroovyScriptHelp=Here you can specify custom logic of execution or call a beans.\
  <br>On script input available the next variables:\
  <ul>\
    <li><code>entity</code> - editing entity.</li> \
    <li><code>context['value']</code> - execution context. In here you can save and get any variables during workflow execution process.</li>\
    <li><code>workflowInstance</code> - current workflow instance object</li>\
    <li><code>workflowInstanceTask</code> - active workflow task of workflow instance</li>\
  </ul>\
  <br>The script must return boolean flag(true/false) which mean can workflow instance iterate to the next step or not.
stageEdit.importFailed = Import failed
stageEdit.importedSuccess = Imported success %d
stageEdit.fileNotFound = File not found
stageEdit.importError = Import error
stageEdit.exportFailed = Export failed
stageEdit.export = Export
stageEdit.exportFileName = stages.zip
stageEdit.fullScreen = Full screen
stageEdit.browserScreen = Browser screen
stageEdit.editorScreen = Editor screen
stageEdit.openConstructor = Open Constructor
stageEdit.screenConstructor = Screen Constructor
stageEdit.screenScript = Groovy Script
stageEdit.cleanup = Cleanup
stageEdit.descriptorOfExtending = Extending Descriptor