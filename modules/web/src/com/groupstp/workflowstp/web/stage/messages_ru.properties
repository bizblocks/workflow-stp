stageBrowse.caption=Этапы
stageEdit.caption=Редактор этапа
stageEdit.general=Главное
stageEdit.userTypeAction=Тип участников
stageEdit.viewerTypeAction=Тип наблюдателей
stageEdit.selectUsers=Пользователи
stageEdit.selectRole=Роли
stageEdit.sameStepAlreadyExist=Шаг с таким именем уже существует
stageEdit.usersEmpty=Пожалуйста выберите участников
stageEdit.roleEmpty=Пожалуйста выберите пользовательскую роль
stageEdit.browseScreenGroovyScript=Groovy script экрана списков
stageEdit.browseScreenGroovyScriptHelp=Здесь вы можете задать логику расширения экрана списка сущностей\
  <br>На вход скрипта подаются следующие переменные:\
  <ul>\
    <li><code>stage</code> - текущий этап экрана списков</li>\
    <li><code>screen</code> - ссылка на экран списков</li>\
    <li><code>viewOnly</code> - экран открыт только на просмотр</li>\
  </ul>
stageEdit.editScreenGroovyScript=Groovy script экрана редактора
stageEdit.editorScreenGroovyScriptHelp=Здесь вы можете задать логику расширения экрана редактора сущности.\
  <br>На вход скрипта подаются следующие переменные:\
  <ul>\
    <li><code>entity</code> - редактируемая сущность.</li> \
    <li><code>context['value']</code> - контекст исполнения. В нем можно хранить данные доступные внутри шагов и логики.</li>\
    <li><code>screen</code> - ссылка на редактируемый экран</li>\
    <li><code>workflowInstance</code> - экземпляр рабочего процесса</li>\
    <li><code>workflowInstanceTask</code> - выполняемая задача рабочего процесса</li>\
  </ul>\
  <br>В случае необходимости запросить комментария от пользователя вызовите следующий диалог:\
  <br><code>WorkflowInstanceCommentDialog#askComment(Frame screen, WorkflowInstanceTask task, Boolean required)</code> где screen текущий экран, task задача к которой создается комментарий, а required флаг о обязательности комментария. \
  <br>\
  <br>Для завершения задачи необходимо вызвать в конце завершения всей логики метод сервиса\
  <code>WorkflowService#finishTask(WorkflowInstance task)</code> который завершит задачу и переведет процесс к следующему шагу.
stageEdit.executionGroovyScript=Groovy скрипт выполнения
stageEdit.executionGroovyScriptHelp=Здесь вы можете задать логику выполнения или вызвать сервис.\
  <br>На вход скрипта подаются следующие переменные:\
  <ul>\
    <li><code>entity</code> - редактируемая сущность.</li> \
    <li><code>context['value']</code> - контекст исполнения. В нем можно хранить данные доступные внутри шагов и логики.</li>\
    <li><code>workflowInstance</code> - экземпляр рабочего процесса</li>\
    <li><code>workflowInstanceTask</code> - выполняемая задача рабочего процесса</li>\
  </ul>\
  <br>Скрипт должен вернуть булевый флаг (true/false) означающий что текущая задача завершена и рабочий процесс может переходить к следующему шагу.
stageEdit.importFailed = Импорт завершился ошибкой
stageEdit.importedSuccess = Импортированно %d
stageEdit.fileNotFound = Файл не найден
stageEdit.importError = Ошибка импорта Import error
stageEdit.exportFailed = Экспорт завершился ошибкой
stageEdit.export = Экспорт
stageEdit.exportFileName = этапы.zip
stageEdit.fullScreen = На весь экран
stageEdit.browserScreen = Экран списков
stageEdit.editorScreen = Экран редактора
stageEdit.openConstructor = Открыть конструктор
stageEdit.screenConstructor = Экранный Конструктор
stageEdit.screenScript = Groovy расширение
stageEdit.cleanup = Очистить
stageEdit.descriptorOfExtending = Дескриптор расширения
stageEdit.name = Наименование